{% if operation.CanRequestBlobs and response.IsFile -%}
{%     if Framework.IsAngularJS -%}
const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
{%     elsif Framework.IsAxios -%}
const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
{%     else -%}
const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
{%     endif -%}
const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
{%     if operation.WrapResponse -%}
{%         if Framework.IsAngular -%}
return {{ Framework.RxJs.ObservableOfMethod }}(new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, data: {% if Framework.Angular.UseHttpClient %}responseBlob as any{% else %}response.blob() as any{% endif %}, status: status, headers: _headers }));
{%         elsif Framework.IsAngularJS -%}
return this.q.resolve(new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers }));
{%         elsif Framework.IsAxios -%}
return Promise.resolve<{{ operation.ResultType }}>(new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers }));
{%         else -%}
return response.blob().then(blob => { return new {{ operation.ResponseClass }}(status, _headers, { fileName: fileName, data: blob, status: status, headers: _headers }); });
{%         endif -%}
{%     else -%}
{%         if Framework.IsAngular -%}
return {{ Framework.RxJs.ObservableOfMethod }}({ fileName: fileName, data: {% if Framework.Angular.UseHttpClient %}responseBlob as any{% else %}response.blob() as any{% endif %}, status: status, headers: _headers });
{%         elsif Framework.IsAngularJS -%}
return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
{%         elsif Framework.IsAxios -%}
return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
{%         else -%}
return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
{%         endif -%}
{%     endif -%}
{% else -%}
{% template Client.ProcessResponse.ReadBodyStart %}
{%     if response.HasType -%}
{%         if response.UseDtoClass -%}
Template Error: UseDtpClass must be disabled
{%         endif -%}
{%         if response.IsSuccess -%}
{%             if operation.WrapResponse -%}
Template Error: WrapResponse must be disabled
{%             else -%}
return Promise.resolve<{{ operation.ResultType }}>(response.data);
{%             endif -%}
{%         else -%}
return throwException("", status, response.data, _headers);
{%         endif -%}
{%     elsif response.IsSuccess -%}
{%         if operation.WrapResponse -%}
return Promise.resolve<{{ operation.ResultType }}>(new {{ operation.ResultType }}(status, _headers, null as any));
{%         else -%}
return Promise.resolve<{{ operation.ResultType }}>(null as any);
{%         endif -%}
{%     else -%}
return throwException("", status, response.data, _headers);
{%     endif -%}
{% template Client.ProcessResponse.ReadBodyEnd %}
{% endif -%}
